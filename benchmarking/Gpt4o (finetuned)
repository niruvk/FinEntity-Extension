{"cells":[{"cell_type":"code","source":["from openai import OpenAI\n","import json"],"metadata":{"id":"CIWvyYKHpfNH"},"id":"CIWvyYKHpfNH","execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import userdata\n","openai_api = userdata.get('openai_api')"],"metadata":{"id":"F1Qt1RDtqa4S"},"id":"F1Qt1RDtqa4S","execution_count":null,"outputs":[]},{"cell_type":"code","source":["client = OpenAI(api_key=openai_api)\n","\n","client.files.create(\n","  file=open(\"/content/train.jsonl\", \"rb\"),\n","  purpose=\"fine-tune\"\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E9f2TYDwpivR","executionInfo":{"status":"ok","timestamp":1745879693385,"user_tz":240,"elapsed":1523,"user":{"displayName":"Chaeyoung Lee","userId":"12796334962980279984"}},"outputId":"3e99acbf-e69a-4f0a-ef39-72c0a30247bd"},"id":"E9f2TYDwpivR","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["FileObject(id='file-Tz5744dX1dBSA4m3vyCXbW', bytes=409153, created_at=1745879692, filename='train.jsonl', object='file', purpose='fine-tune', status='processed', expires_at=None, status_details=None)"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["client.files.create(\n","  file=open(\"/content/valid.jsonl\", \"rb\"),\n","  purpose=\"fine-tune\"\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yVC-J3inihSA","executionInfo":{"status":"ok","timestamp":1745879746522,"user_tz":240,"elapsed":1733,"user":{"displayName":"Chaeyoung Lee","userId":"12796334962980279984"}},"outputId":"86fae6d3-919d-484c-81bf-c1b8bdc2d255"},"id":"yVC-J3inihSA","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["FileObject(id='file-Hn7K2qF5rnAxu74U4f6uTm', bytes=119186, created_at=1745879745, filename='valid.jsonl', object='file', purpose='fine-tune', status='processed', expires_at=None, status_details=None)"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["job = client.fine_tuning.jobs.create(\n","    training_file=\"file-1JCoa1mP2omDbYaZ7y3TpX\",\n","    validation_file='file-Hn7K2qF5rnAxu74U4f6uTm',\n","    model=\"gpt-4o-2024-08-06\",\n","    method={\n","        \"type\": \"supervised\",\n","        \"supervised\": {\n","            \"hyperparameters\": {\"n_epochs\": 3},\n","        },\n","    },\n",")"],"metadata":{"id":"cBNzt5NMpfGC"},"id":"cBNzt5NMpfGC","execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Cw8IJubWkzwM"},"id":"Cw8IJubWkzwM","execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"8lWDXE0Zkzmh"},"id":"8lWDXE0Zkzmh","execution_count":null,"outputs":[]},{"cell_type":"code","source":["!pip install seqeval"],"metadata":{"id":"IKVrS2XwMAvj"},"id":"IKVrS2XwMAvj","execution_count":null,"outputs":[]},{"cell_type":"code","source":["import os\n","import time\n","import json\n","import openai"],"metadata":{"id":"DtmGdsYOc3tn","executionInfo":{"status":"ok","timestamp":1746411662105,"user_tz":240,"elapsed":3,"user":{"displayName":"Chaeyoung Lee","userId":"12796334962980279984"}}},"id":"DtmGdsYOc3tn","execution_count":59,"outputs":[]},{"cell_type":"code","source":["from google.colab import userdata\n","openai_api = userdata.get('openai_api')\n","openai.api_key = openai_api"],"metadata":{"id":"0ciR446Cl0Bh","executionInfo":{"status":"ok","timestamp":1746411662691,"user_tz":240,"elapsed":300,"user":{"displayName":"Chaeyoung Lee","userId":"12796334962980279984"}}},"id":"0ciR446Cl0Bh","execution_count":60,"outputs":[]},{"cell_type":"code","execution_count":61,"id":"a48ad357-b3fd-4609-a4ea-5dd94da1560d","metadata":{"id":"a48ad357-b3fd-4609-a4ea-5dd94da1560d","executionInfo":{"status":"ok","timestamp":1746411662703,"user_tz":240,"elapsed":2,"user":{"displayName":"Chaeyoung Lee","userId":"12796334962980279984"}}},"outputs":[],"source":["sys_prompt = \"Discard all the previous instructions. Behave like you are an expert entity recognizer and sentiment classifier. \"\n","user_prompt = \"\"\"\n","Identify the entities which are companies or organizations from the following content and classify the sentiment of the corresponding entities into ‘Neutral’, ‘Positive’, or ‘Negative’ classes.\n","Considering every sentence as a String in python, provide the entities with the start and end index to mark the boundaries of it including spaces and punctuation using zero-based indexing.\n","Do not give explanations for the sentiment. In the output,Tag means sentiment; value means entity name. If no entity is found in the sentence, the response should be empty.\n","The sentence:\n","\"\"\""]},{"cell_type":"code","execution_count":62,"id":"d3a96169-0419-4e8d-b207-4383e720fb44","metadata":{"tags":[],"id":"d3a96169-0419-4e8d-b207-4383e720fb44","executionInfo":{"status":"ok","timestamp":1746411664591,"user_tz":240,"elapsed":12,"user":{"displayName":"Chaeyoung Lee","userId":"12796334962980279984"}}},"outputs":[],"source":["def subset(alist, idxs):\n","    sub_list = []\n","    for idx in idxs:\n","        sub_list.append(alist[idx])\n","\n","    return sub_list\n","\n","def run_inference(sentence):\n","    try:\n","        rsp = openai.chat.completions.create(\n","            model=\"ft:gpt-4o-2024-08-06:princeton-university::BRRgdUtO\",\n","            messages=[\n","                {\"role\": \"system\", \"content\": sys_prompt},\n","                {\"role\": \"user\", \"content\": user_prompt + sentence},\n","            ],\n","            temperature=0.0,\n","        )\n","    except:\n","        print(\"retry request\")\n","        time.sleep(0.5)\n","        rsp = openai.chat.completions.create(\n","            model=\"ft:gpt-4o-2024-08-06:princeton-university::BRRgdUtO\",\n","            messages=[{\"role\": \"user\", \"content\": sentence},],temperature=0.0,)\n","    else:\n","        result_dict = {}\n","        result_dict['content'] = sentence\n","        if len(rsp.choices)==0:\n","            result_dict['annotations'] = []\n","            return result_dict\n","        choice = rsp.choices[0]\n","        message = choice.message\n","        res_str = message.content\n","        res_str = res_str.split('\\n')\n","        anno_list = []\n","        if len(res_str)==0:\n","            result_dict['annotations'] = []\n","            return result_dict\n","        for res in res_str:\n","            index_left = res.find('{')\n","            index_right = res.find('}')\n","            if index_right == -1 or index_left == -1:\n","                continue\n","            res = res[index_left:index_right+1]\n","            sub_json = json.loads(res)\n","            anno_list.append(sub_json)\n","        result_dict['annotations'] = anno_list\n","    return result_dict"]},{"cell_type":"code","source":["instructions = 'Identify the entities which are companies or organizations from the following content and classify the sentiment of the corresponding entities into ‘Neutral’, ‘Positive’, or ‘Negative’ classes.      Considering every sentence as a String in python, provide the entities with the start and end index to mark the boundaries of it including spaces and punctuation using zero-based indexing.\\\\Do not give explanations for the sentiment. In the output,Tag means sentiment; value means entity name. If no entity is found in the sentence, the response should be empty.      The sentence: '"],"metadata":{"id":"0w3eDmbNhCP3","executionInfo":{"status":"ok","timestamp":1746411666003,"user_tz":240,"elapsed":3,"user":{"displayName":"Chaeyoung Lee","userId":"12796334962980279984"}}},"id":"0w3eDmbNhCP3","execution_count":63,"outputs":[]},{"cell_type":"code","source":["compare_list = []\n","with open('/content/valid.jsonl', 'r') as f:\n","  for msg in f:\n","    msg = json.loads(msg)\n","    content = msg['messages']\n","    contents = []\n","    annotations_list = []\n","    for item in content:\n","      if item['role'] == 'user':\n","        if instructions in item['content']:\n","          sentence = item['content'].split(instructions)[1].strip()\n","        else:\n","          sentence = item['content']\n","        contents.append(sentence)\n","      if item['role'] == 'assistant':\n","        annotations = [json.loads(i) for i in item['content'].split('\\n')]\n","        annotations_list.append(annotations)\n","    for sentence, annotations in zip(contents, annotations_list):\n","      entry = {'content': sentence,'annotations': annotations}\n","      compare_list.append(entry)"],"metadata":{"id":"dniyh2UnG4sh","executionInfo":{"status":"ok","timestamp":1746411666641,"user_tz":240,"elapsed":2,"user":{"displayName":"Chaeyoung Lee","userId":"12796334962980279984"}}},"id":"dniyh2UnG4sh","execution_count":64,"outputs":[]},{"cell_type":"code","source":["with open('/content/valid.jsonl', 'r') as f:\n","  result_list=[]\n","  for msg in f:\n","    msg = json.loads(msg)\n","    content = msg['messages']\n","    for item in content:\n","      if item['role'] == 'user':\n","        if instructions in item['content']:\n","          sentence = item['content'].split(instructions)[1].strip()\n","        else:\n","          sentence = item['content']\n","        r = run_inference(sentence)\n","        result_list.append(r)"],"metadata":{"id":"4jTfUtLfeLBp","executionInfo":{"status":"ok","timestamp":1746412026436,"user_tz":240,"elapsed":358980,"user":{"displayName":"Chaeyoung Lee","userId":"12796334962980279984"}}},"id":"4jTfUtLfeLBp","execution_count":65,"outputs":[]},{"cell_type":"code","source":["#Correcting start and end tags\n","for i,item in enumerate(result_list):\n","    text = item['content']\n","    annos = item['annotations']\n","    sorted_annos = sorted(annos, key=lambda x: x['start'])\n","    value_list = []\n","    start_list = []\n","    drop_list = []\n","    for indx,sub_annos in enumerate(sorted_annos):\n","        value = sub_annos['value']\n","        if value not in value_list:\n","            start = text.find(value)\n","        else:\n","            index_list = []\n","            for j,v in enumerate(value_list):\n","                if v==value:\n","                    index_list.append(j)\n","            sub_start = subset(start_list,index_list)\n","            last_start = max(sub_start)\n","            start = text.find(value,last_start+1)\n","        sub_annos['start'] = start\n","        sub_annos['end'] = start + len(value)\n","        value_list.append(value)\n","        start_list.append(start)"],"metadata":{"id":"u8ddx1gUd_uT","executionInfo":{"status":"ok","timestamp":1746412026457,"user_tz":240,"elapsed":17,"user":{"displayName":"Chaeyoung Lee","userId":"12796334962980279984"}}},"id":"u8ddx1gUd_uT","execution_count":66,"outputs":[]},{"cell_type":"code","execution_count":67,"id":"879dae4d-cf4b-4df3-9475-142eb5f9487d","metadata":{"id":"879dae4d-cf4b-4df3-9475-142eb5f9487d","executionInfo":{"status":"ok","timestamp":1746412026458,"user_tz":240,"elapsed":16,"user":{"displayName":"Chaeyoung Lee","userId":"12796334962980279984"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"33123fd3-059e-4ff4-d367-b5e5560dc89a"},"outputs":[{"output_type":"stream","name":"stdout","text":["COMPLETE\n"]}],"source":["with open('/content/open_ai.json', 'wt') as f:\n","    print(json.dumps(result_list), file=f)\n","print(\"COMPLETE\")"]},{"cell_type":"code","execution_count":68,"id":"19de4429-2560-4518-8da6-65ebf5cb242a","metadata":{"id":"19de4429-2560-4518-8da6-65ebf5cb242a","executionInfo":{"status":"ok","timestamp":1746412026459,"user_tz":240,"elapsed":9,"user":{"displayName":"Chaeyoung Lee","userId":"12796334962980279984"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"9856980a-3eae-4efa-8842-0f2a393ff2c8"},"outputs":[{"output_type":"stream","name":"stdout","text":["200\n","200\n"]}],"source":["print(len(compare_list))\n","print(len(result_list))"]},{"cell_type":"code","execution_count":69,"id":"4baed6ee-4bd9-479b-b11b-88274ca6f110","metadata":{"id":"4baed6ee-4bd9-479b-b11b-88274ca6f110","executionInfo":{"status":"ok","timestamp":1746412026459,"user_tz":240,"elapsed":6,"user":{"displayName":"Chaeyoung Lee","userId":"12796334962980279984"}}},"outputs":[],"source":["for idx,item in enumerate(result_list):\n","    annos = item['annotations']\n","    drop_list=[]\n","    item['annotations'] = [x for x in annos if x['start']>0]\n"]},{"cell_type":"code","execution_count":70,"id":"15721aed-89da-4ef5-b2fa-2542f57d6755","metadata":{"id":"15721aed-89da-4ef5-b2fa-2542f57d6755","executionInfo":{"status":"ok","timestamp":1746412026461,"user_tz":240,"elapsed":7,"user":{"displayName":"Chaeyoung Lee","userId":"12796334962980279984"}}},"outputs":[],"source":["for idx,item in enumerate(result_list):\n","    annos = item['annotations']\n","    for a in annos:\n","        if a['start']<0:\n","            print(item)"]},{"cell_type":"code","execution_count":71,"id":"c0509423-361d-4abe-9006-1b4f37c660eb","metadata":{"id":"c0509423-361d-4abe-9006-1b4f37c660eb","executionInfo":{"status":"ok","timestamp":1746412026463,"user_tz":240,"elapsed":9,"user":{"displayName":"Chaeyoung Lee","userId":"12796334962980279984"}}},"outputs":[],"source":["#result_list = json.load(open('./data/open_ai.json'))\n","for example in result_list:\n","    for annotation in example['annotations']:\n","        #We expect the key of label to be label but the data has tag\n","        annotation['label'] = annotation['tag']"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OM5M7vbbE26P","executionInfo":{"status":"ok","timestamp":1746412026922,"user_tz":240,"elapsed":467,"user":{"displayName":"Chaeyoung Lee","userId":"12796334962980279984"}},"outputId":"28e24517-e67c-45a1-cf4a-41fb0132e684"},"id":"OM5M7vbbE26P","execution_count":72,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["import sys\n","sys.path.append('/content/drive/MyDrive/Courses/Spring 2025/COS 484/final project/chae')"],"metadata":{"id":"CxfSuIj9E95U","executionInfo":{"status":"ok","timestamp":1746412026925,"user_tz":240,"elapsed":3,"user":{"displayName":"Chaeyoung Lee","userId":"12796334962980279984"}}},"id":"CxfSuIj9E95U","execution_count":73,"outputs":[]},{"cell_type":"code","execution_count":74,"id":"9a4dd26b-fc86-4552-8209-3d862e30188e","metadata":{"id":"9a4dd26b-fc86-4552-8209-3d862e30188e","executionInfo":{"status":"ok","timestamp":1746412027255,"user_tz":240,"elapsed":325,"user":{"displayName":"Chaeyoung Lee","userId":"12796334962980279984"}}},"outputs":[],"source":["from sequence_aligner.labelset import LabelSet\n","from sequence_aligner.dataset import TrainingDatasetCRF\n","from sequence_aligner.containers import TraingingBatch\n","from transformers import BertTokenizerFast\n","\n","tokenizer = BertTokenizerFast.from_pretrained('yiyanghkust/finbert-pretrain')\n","label_set = LabelSet(labels=[\"Neutral\", \"Positive\", \"Negative\"])  # label in this dataset\n","\n","dataset = TrainingDatasetCRF(data=compare_list, tokenizer=tokenizer, label_set=label_set,tokens_per_batch = 128)\n","dataset_openai = TrainingDatasetCRF(data=result_list, tokenizer=tokenizer, label_set=label_set,tokens_per_batch = 128)"]},{"cell_type":"code","source":["# 3 epoch model\n","from seqeval.metrics import f1_score\n","from seqeval.metrics import precision_score\n","from seqeval.metrics import accuracy_score\n","from seqeval.metrics import recall_score\n","from seqeval.metrics import classification_report\n","from util.process import ids_to_labels,Metrics,Metrics_e\n","from seqeval.scheme import BILOU\n","\n","label_list=[]\n","pred_label_list=[]\n","for i in range(len(dataset)):\n","    sub_list=[]\n","    pred_sub_list=[]\n","    for m in dataset[i].labels:\n","        if m == -1:\n","            continue\n","        else:\n","            sub_list.append(label_set.ids_to_label[m])\n","    for n in dataset_openai[i].labels:\n","        if n == -1:\n","            continue\n","        else:\n","            if n == None:\n","                n = 0\n","            pred_sub_list.append(label_set.ids_to_label[n])\n","    label_list.append(sub_list)\n","    pred_label_list.append(pred_sub_list)\n","report=classification_report(label_list, pred_label_list, mode='strict', scheme=BILOU)\n","print(report)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pAcVthpSPwID","executionInfo":{"status":"ok","timestamp":1746412027271,"user_tz":240,"elapsed":18,"user":{"displayName":"Chaeyoung Lee","userId":"12796334962980279984"}},"outputId":"b1eeb4f2-22d2-4def-d66b-62cc96a66250"},"id":"pAcVthpSPwID","execution_count":75,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","    Negative       0.86      0.73      0.79       103\n","     Neutral       0.90      0.84      0.87       359\n","    Positive       0.92      0.73      0.81        33\n","\n","   micro avg       0.90      0.81      0.85       495\n","   macro avg       0.90      0.77      0.83       495\n","weighted avg       0.90      0.81      0.85       495\n","\n"]}]},{"cell_type":"code","source":["# 2 epoch model\n","\n","from seqeval.metrics import f1_score\n","from seqeval.metrics import precision_score\n","from seqeval.metrics import accuracy_score\n","from seqeval.metrics import recall_score\n","from seqeval.metrics import classification_report\n","from util.process import ids_to_labels,Metrics,Metrics_e\n","from seqeval.scheme import BILOU\n","\n","label_list=[]\n","pred_label_list=[]\n","for i in range(len(dataset)):\n","    sub_list=[]\n","    pred_sub_list=[]\n","    for m in dataset[i].labels:\n","        if m == -1:\n","            continue\n","        else:\n","            sub_list.append(label_set.ids_to_label[m])\n","    for n in dataset_openai[i].labels:\n","        if n == -1:\n","            continue\n","        else:\n","            if n == None:\n","                n = 0\n","            pred_sub_list.append(label_set.ids_to_label[n])\n","    label_list.append(sub_list)\n","    pred_label_list.append(pred_sub_list)\n","report=classification_report(label_list, pred_label_list, mode='strict', scheme=BILOU)\n","print(report)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aTKEbFD1LOdh","executionInfo":{"status":"ok","timestamp":1746411211532,"user_tz":240,"elapsed":13,"user":{"displayName":"Chaeyoung Lee","userId":"12796334962980279984"}},"outputId":"5f2ac5d0-bd55-4efd-f29b-65b455ac6126"},"id":"aTKEbFD1LOdh","execution_count":58,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","    Negative       0.91      0.72      0.80       103\n","     Neutral       0.89      0.87      0.88       359\n","    Positive       0.95      0.58      0.72        33\n","\n","   micro avg       0.89      0.82      0.85       495\n","   macro avg       0.92      0.72      0.80       495\n","weighted avg       0.90      0.82      0.85       495\n","\n"]}]},{"cell_type":"code","execution_count":41,"id":"f53fe786-4dfb-4cc1-a43d-85a237ca2371","metadata":{"tags":[],"id":"f53fe786-4dfb-4cc1-a43d-85a237ca2371","executionInfo":{"status":"ok","timestamp":1746410386272,"user_tz":240,"elapsed":899,"user":{"displayName":"Chaeyoung Lee","userId":"12796334962980279984"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"546ac2cc-d72b-42ed-ace4-b1d804e01aed"},"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","    Negative       0.85      0.68      0.76       103\n","     Neutral       0.87      0.81      0.84       359\n","    Positive       0.74      0.70      0.72        33\n","\n","   micro avg       0.86      0.78      0.82       495\n","   macro avg       0.82      0.73      0.77       495\n","weighted avg       0.86      0.78      0.81       495\n","\n"]}],"source":["# 1 epoch model\n","\n","from seqeval.metrics import f1_score\n","from seqeval.metrics import precision_score\n","from seqeval.metrics import accuracy_score\n","from seqeval.metrics import recall_score\n","from seqeval.metrics import classification_report\n","from util.process import ids_to_labels,Metrics,Metrics_e\n","from seqeval.scheme import BILOU\n","\n","label_list=[]\n","pred_label_list=[]\n","for i in range(len(dataset)):\n","    sub_list=[]\n","    pred_sub_list=[]\n","    for m in dataset[i].labels:\n","        if m == -1:\n","            continue\n","        else:\n","            sub_list.append(label_set.ids_to_label[m])\n","    for n in dataset_openai[i].labels:\n","        if n == -1:\n","            continue\n","        else:\n","            if n == None:\n","                n = 0\n","            pred_sub_list.append(label_set.ids_to_label[n])\n","    label_list.append(sub_list)\n","    pred_label_list.append(pred_sub_list)\n","report=classification_report(label_list, pred_label_list, mode='strict', scheme=BILOU)\n","print(report)"]},{"cell_type":"code","execution_count":null,"id":"8b999267-5271-472c-ae0b-c3ec77dbeb5c","metadata":{"id":"8b999267-5271-472c-ae0b-c3ec77dbeb5c","executionInfo":{"status":"aborted","timestamp":1746408791558,"user_tz":240,"elapsed":152,"user":{"displayName":"Chaeyoung Lee","userId":"12796334962980279984"}}},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"id":"c9d19d2b-8a58-453e-b9da-8d3cdbf8593d","metadata":{"id":"c9d19d2b-8a58-453e-b9da-8d3cdbf8593d","executionInfo":{"status":"aborted","timestamp":1746408791560,"user_tz":240,"elapsed":152,"user":{"displayName":"Chaeyoung Lee","userId":"12796334962980279984"}}},"outputs":[],"source":[]},{"cell_type":"code","source":[],"metadata":{"id":"oK1TFq-Id7rc","executionInfo":{"status":"aborted","timestamp":1746408791562,"user_tz":240,"elapsed":153,"user":{"displayName":"Chaeyoung Lee","userId":"12796334962980279984"}}},"id":"oK1TFq-Id7rc","execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"-_D1-3srd75a","executionInfo":{"status":"aborted","timestamp":1746408791564,"user_tz":240,"elapsed":153,"user":{"displayName":"Chaeyoung Lee","userId":"12796334962980279984"}}},"id":"-_D1-3srd75a","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.9"},"colab":{"provenance":[{"file_id":"12WfE0QwZqCf3Ar_PN_fB5KpnCq-gaygL","timestamp":1744906210129}],"gpuType":"T4"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":5}